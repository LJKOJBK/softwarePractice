// local.properties
Properties localProperties = new Properties()
localProperties.load(project.rootProject.file('local.properties').newDataInputStream())

// root/gradle.properties
Map rootProperties = project.getProperties();

def storeFileStr = localProperties.getProperty('RELEASE_STORE_FILE',
        rootProperties.get('RELEASE_STORE_FILE', null))
def storePwdStr = localProperties.getProperty('RELEASE_STORE_PASSWORD',
        rootProperties.get('RELEASE_STORE_PASSWORD', null))
def keyAliasStr = localProperties.getProperty('RELEASE_KEY_ALIAS',
        rootProperties.get('RELEASE_KEY_ALIAS', null))
def keyPwdStr = localProperties.getProperty('RELEASE_KEY_PASSWORD',
        rootProperties.get('RELEASE_KEY_PASSWORD', null))

def debugCompileUrl = localProperties.getProperty('DEBUG_COMPILE_URL',
        rootProperties.get('DEBUG_COMPILE_URL', null))
def debugCompile = localProperties.getProperty('DEBUG_COMPILE',
        rootProperties.get('DEBUG_COMPILE', null))

android.buildTypes.all { buildType ->
    localProperties.any { property ->
        if (property.key.equals("VIOLET_PASSCODE")) {
            buildType.buildConfigField "String", property.key, "\"${property.value}\""
        }
        if (property.key.equals("AES_KEY")) {
            buildType.buildConfigField "String", property.key, "\"${property.value}\""
        }
        if (property.key.equals("AES_IV")) {
            buildType.buildConfigField "String", property.key, "\"${property.value}\""
        }
    }
}
ext {
    propertyHaveSigningConfigs = (storeFileStr != null && storePwdStr != null && keyAliasStr != null && keyPwdStr != null)
    propertyStoreFileStr = storeFileStr
    propertyStorePwdStr = storePwdStr
    propertyKeyAliasStr = keyAliasStr
    propertyKeyPwdStr = keyPwdStr

    propertyHaveDebugCompile = (debugCompileUrl != null && debugCompile != null)
    propertyDebugCompileUrl = debugCompileUrl
    propertyDebugCompile = debugCompile
}